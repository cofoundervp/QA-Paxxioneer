*** Settings ***
Resource          resource config.txt

*** Keywords ***
open paxxioneer in a new browser
    [Arguments]    ${kw_arg_browser}    ${kw_arg_environment}    ${kw_end domain}
    [Documentation]    This keyword is to open paxxioneer.com
    ...
    ...    Argurment: ${browser}, ${environment}
    ...
    ...    ${browser} = gc / ff / ie
    ...
    ...    ${environment} = staging / dev / www
    ...
    ...    default:
    ...
    ...    ${browser} == ff
    ...
    ...    ${environment} == staging
    Open Application    http://localhost:4723/wd/hub    platformName=Android    platformVersion=4.4.2    deviceName=${config_device name}    browserName=${kw_arg_browser}
    Go To Url    http://${kw_arg_environment}.paxxioneer.${kw_end domain}
    AppiumLibrary.Set Appium Timeout    15

global cooldown
    [Documentation]    This keyword to call the Sleep buildin keyword in a defined time (in second)
    sleep    ${config_wait_time}

WRITE MESSAGE TO CONSOLE AND LOG FILE
    [Arguments]    ${arg_msg}
    Log    ${arg_msg}    INFO    \    True

VERIFY WITH ERROR HANDLE
    [Arguments]    ${verify point}    ${message if passed}    ${message if failed}
    WRITE MESSAGE TO CONSOLE AND LOG FILE    >> VERIFY POINT <<
    Run Keyword If    '${verify point}' == 'True'    WRITE MESSAGE TO CONSOLE AND LOG FILE    ${message if passed}
    Run Keyword If    '${verify point}' == 'True'    Capture Page Screenshot
    Run Keyword If    '${verify point}' == 'False'    Fail    ${message if failed}
    WRITE MESSAGE TO CONSOLE AND LOG FILE    >> VERIFY POINT EXIT <<

scroll and click
    [Arguments]    ${arg_pilot element}    ${arg_element to click}
    Comment    Scroll Down    ${arg_pilot element}
    Comment    Wait Until Page Contains Element    ${arg_pilot element}
    sleep    1s
    Click Element    ${arg_element to click}

open login form and login
    [Arguments]    ${arg_username}    ${arg_password}
    Comment    open or close header menu
    WRITE MESSAGE TO CONSOLE AND LOG FILE    Open Login form
    Click Element    ${cm_header_login link}
    # wait until email address field is shown
    Wait Until Page Contains Element    ${username field}
    Input Text    ${username field}    ${arg_username}
    Input Text    ${password field}    ${arg_password}
    Click Element    ${login now button}
    global cooldown
    WRITE MESSAGE TO CONSOLE AND LOG FILE    Sign In keyword. Done.

generate username
    ${date}    Get Current Date    result_format=%Y-%m-%d
    ${username}    Generate Random String    10
    ${username}    Catenate    SEPARATOR=-    ${date}    ${username}
    [Return]    ${username}

open signup form
    [Documentation]    -- Open header menu
    ...
    ...    -- Click Sign Up button
    ...
    ...    -- Wait Page contains Sign Up form
    open or close header menu
    Click Element    ${cm_header_sign up link}
    Wait Until Page Contains Element    ${su_sign up form}

generate email
    [Arguments]    ${arg_username}
    ${arg_email}    Catenate    SEPARATOR=    ${arg_username}    ${gb_email domain}
    [Return]    ${arg_email}

open or close header menu
    global cooldown
    Click Element    ${cm_header main menu button}
    global cooldown

logout
    open or close header menu
    Click Element    ${cm_header_logout}

navigate to page under header menu
    [Arguments]    ${arg_page name}
    [Documentation]    1. Open header menu
    ...
    ...    2. Click ${arg_page name}
    ...
    ...    3. cool down
    open or close header menu
    Click Element    //a[contains(text(),'${arg_page name}')]
    global cooldown

verify message popup
    [Arguments]    ${expected text}
    Wait Until Page Contains Element    //div[@class="message ng-binding"]
    ${kw_flag}    Run Keyword And Return Status    Page Should Contain Element    //div[@class="message ng-binding" and contains(text(),'${expected text}')]
    VERIFY WITH ERROR HANDLE    ${kw_flag}    Expected text "${expected text}" matched    Expected text not found!!!

scroll to element
    [Arguments]    ${arg_current element locator}
    @{cl}    Get Element Location    ${arg_current element locator}
    Swipe    ${cl}[2]    ${cl}[1]    ${cl}[2]    ${cl}[1]
